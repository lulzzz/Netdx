/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class FlowAttributes : TBase
{
  private long _FirstSeen;
  private long _LastSeen;
  private int _Packets;
  private long _Octets;
  private int _MinimumPayloadSize;
  private int _MeanPayloadSize;
  private int _MaximumPayloadSize;
  private int _StdevPayloadSize;
  private long _MinimumInterarrivalTime;
  private long _MeanInterarrivalTime;
  private long _MaximumInterarrivalTime;
  private long _StdevInterarrivalTime;

  public long FirstSeen
  {
    get
    {
      return _FirstSeen;
    }
    set
    {
      __isset.FirstSeen = true;
      this._FirstSeen = value;
    }
  }

  public long LastSeen
  {
    get
    {
      return _LastSeen;
    }
    set
    {
      __isset.LastSeen = true;
      this._LastSeen = value;
    }
  }

  public int Packets
  {
    get
    {
      return _Packets;
    }
    set
    {
      __isset.Packets = true;
      this._Packets = value;
    }
  }

  public long Octets
  {
    get
    {
      return _Octets;
    }
    set
    {
      __isset.Octets = true;
      this._Octets = value;
    }
  }

  public int MinimumPayloadSize
  {
    get
    {
      return _MinimumPayloadSize;
    }
    set
    {
      __isset.MinimumPayloadSize = true;
      this._MinimumPayloadSize = value;
    }
  }

  public int MeanPayloadSize
  {
    get
    {
      return _MeanPayloadSize;
    }
    set
    {
      __isset.MeanPayloadSize = true;
      this._MeanPayloadSize = value;
    }
  }

  public int MaximumPayloadSize
  {
    get
    {
      return _MaximumPayloadSize;
    }
    set
    {
      __isset.MaximumPayloadSize = true;
      this._MaximumPayloadSize = value;
    }
  }

  public int StdevPayloadSize
  {
    get
    {
      return _StdevPayloadSize;
    }
    set
    {
      __isset.StdevPayloadSize = true;
      this._StdevPayloadSize = value;
    }
  }

  public long MinimumInterarrivalTime
  {
    get
    {
      return _MinimumInterarrivalTime;
    }
    set
    {
      __isset.MinimumInterarrivalTime = true;
      this._MinimumInterarrivalTime = value;
    }
  }

  public long MeanInterarrivalTime
  {
    get
    {
      return _MeanInterarrivalTime;
    }
    set
    {
      __isset.MeanInterarrivalTime = true;
      this._MeanInterarrivalTime = value;
    }
  }

  public long MaximumInterarrivalTime
  {
    get
    {
      return _MaximumInterarrivalTime;
    }
    set
    {
      __isset.MaximumInterarrivalTime = true;
      this._MaximumInterarrivalTime = value;
    }
  }

  public long StdevInterarrivalTime
  {
    get
    {
      return _StdevInterarrivalTime;
    }
    set
    {
      __isset.StdevInterarrivalTime = true;
      this._StdevInterarrivalTime = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool FirstSeen;
    public bool LastSeen;
    public bool Packets;
    public bool Octets;
    public bool MinimumPayloadSize;
    public bool MeanPayloadSize;
    public bool MaximumPayloadSize;
    public bool StdevPayloadSize;
    public bool MinimumInterarrivalTime;
    public bool MeanInterarrivalTime;
    public bool MaximumInterarrivalTime;
    public bool StdevInterarrivalTime;
  }

  public FlowAttributes() {
    this._FirstSeen = 1;
    this.__isset.FirstSeen = true;
    this._LastSeen = 2;
    this.__isset.LastSeen = true;
    this._Packets = 3;
    this.__isset.Packets = true;
    this._Octets = 4;
    this.__isset.Octets = true;
    this._MinimumPayloadSize = 8;
    this.__isset.MinimumPayloadSize = true;
    this._MeanPayloadSize = 9;
    this.__isset.MeanPayloadSize = true;
    this._MaximumPayloadSize = 10;
    this.__isset.MaximumPayloadSize = true;
    this._StdevPayloadSize = 11;
    this.__isset.StdevPayloadSize = true;
    this._MinimumInterarrivalTime = 16;
    this.__isset.MinimumInterarrivalTime = true;
    this._MeanInterarrivalTime = 17;
    this.__isset.MeanInterarrivalTime = true;
    this._MaximumInterarrivalTime = 18;
    this.__isset.MaximumInterarrivalTime = true;
    this._StdevInterarrivalTime = 19;
    this.__isset.StdevInterarrivalTime = true;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              FirstSeen = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              LastSeen = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Packets = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              Octets = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              MinimumPayloadSize = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              MeanPayloadSize = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              MaximumPayloadSize = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              StdevPayloadSize = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I64) {
              MinimumInterarrivalTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I64) {
              MeanInterarrivalTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I64) {
              MaximumInterarrivalTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I64) {
              StdevInterarrivalTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("FlowAttributes");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.FirstSeen) {
        field.Name = "FirstSeen";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(FirstSeen);
        oprot.WriteFieldEnd();
      }
      if (__isset.LastSeen) {
        field.Name = "LastSeen";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastSeen);
        oprot.WriteFieldEnd();
      }
      if (__isset.Packets) {
        field.Name = "Packets";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Packets);
        oprot.WriteFieldEnd();
      }
      if (__isset.Octets) {
        field.Name = "Octets";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Octets);
        oprot.WriteFieldEnd();
      }
      if (__isset.MinimumPayloadSize) {
        field.Name = "MinimumPayloadSize";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MinimumPayloadSize);
        oprot.WriteFieldEnd();
      }
      if (__isset.MeanPayloadSize) {
        field.Name = "MeanPayloadSize";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MeanPayloadSize);
        oprot.WriteFieldEnd();
      }
      if (__isset.MaximumPayloadSize) {
        field.Name = "MaximumPayloadSize";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaximumPayloadSize);
        oprot.WriteFieldEnd();
      }
      if (__isset.StdevPayloadSize) {
        field.Name = "StdevPayloadSize";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(StdevPayloadSize);
        oprot.WriteFieldEnd();
      }
      if (__isset.MinimumInterarrivalTime) {
        field.Name = "MinimumInterarrivalTime";
        field.Type = TType.I64;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(MinimumInterarrivalTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.MeanInterarrivalTime) {
        field.Name = "MeanInterarrivalTime";
        field.Type = TType.I64;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(MeanInterarrivalTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.MaximumInterarrivalTime) {
        field.Name = "MaximumInterarrivalTime";
        field.Type = TType.I64;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(MaximumInterarrivalTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.StdevInterarrivalTime) {
        field.Name = "StdevInterarrivalTime";
        field.Type = TType.I64;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(StdevInterarrivalTime);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("FlowAttributes(");
    bool __first = true;
    if (__isset.FirstSeen) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("FirstSeen: ");
      __sb.Append(FirstSeen);
    }
    if (__isset.LastSeen) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("LastSeen: ");
      __sb.Append(LastSeen);
    }
    if (__isset.Packets) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Packets: ");
      __sb.Append(Packets);
    }
    if (__isset.Octets) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Octets: ");
      __sb.Append(Octets);
    }
    if (__isset.MinimumPayloadSize) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("MinimumPayloadSize: ");
      __sb.Append(MinimumPayloadSize);
    }
    if (__isset.MeanPayloadSize) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("MeanPayloadSize: ");
      __sb.Append(MeanPayloadSize);
    }
    if (__isset.MaximumPayloadSize) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("MaximumPayloadSize: ");
      __sb.Append(MaximumPayloadSize);
    }
    if (__isset.StdevPayloadSize) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("StdevPayloadSize: ");
      __sb.Append(StdevPayloadSize);
    }
    if (__isset.MinimumInterarrivalTime) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("MinimumInterarrivalTime: ");
      __sb.Append(MinimumInterarrivalTime);
    }
    if (__isset.MeanInterarrivalTime) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("MeanInterarrivalTime: ");
      __sb.Append(MeanInterarrivalTime);
    }
    if (__isset.MaximumInterarrivalTime) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("MaximumInterarrivalTime: ");
      __sb.Append(MaximumInterarrivalTime);
    }
    if (__isset.StdevInterarrivalTime) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("StdevInterarrivalTime: ");
      __sb.Append(StdevInterarrivalTime);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

